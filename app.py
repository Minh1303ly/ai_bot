from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from transformers import pipeline, AutoTokenizer, AutoModelForSeq2SeqLM
import json
import os
import random
import unicodedata

app = Flask(__name__)
CORS(app)

# Load model
model_name = "vinai/bartpho-word"
tokenizer = AutoTokenizer.from_pretrained(model_name)
generator = pipeline("text2text-generation", model=model_name, tokenizer=tokenizer)

# Load and validate training data
try:
    with open("chatbot_training_data.json", "r", encoding="utf-8") as f:
        training_data = json.load(f)
    if not isinstance(training_data.get("intents"), list):
        raise ValueError("JSON file must contain an 'intents' list")
    print("JSON file loaded successfully. Patterns for 'inquire_product':", 
          [p for intent in training_data["intents"] if intent["intent"] == "inquire_product" for p in intent["examples"]])
except Exception as e:
    print(f"Error loading JSON: {e}")
    training_data = {"intents": [], "products": []}

# ==================== INTENT DETECTION ====================
def detect_intent(user_input):
    user_input_normalized = unicodedata.normalize("NFKC", user_input.lower().strip())
    for intent in training_data.get("intents", []):
        for pattern in intent.get("examples", []):
            pattern_normalized = unicodedata.normalize("NFKC", pattern.lower().strip())
            print(f"Checking pattern: '{pattern_normalized}' against input: '{user_input_normalized}'")  # Debug log
            if pattern_normalized == user_input_normalized or pattern_normalized in user_input_normalized:
                print(f"Matched intent: {intent['intent']} with pattern: '{pattern}'")  # Debug log
                price_max, color, category, pet_type, size, material, location = extract_query_info(user_input)
                response = random.choice(intent["responses"])
                response = response.replace("{clothing_type}", category or "qu·∫ßn √°o")
                response = response.replace("{pet_type}", pet_type or "th√∫ c∆∞ng")
                response = response.replace("{size}", size or "ph√π h·ª£p")
                response = response.replace("{color}", color or "ƒë·∫πp")
                response = response.replace("{location}", location or "b·∫°n")
                response = response.replace("{age}", "ph√π h·ª£p")
                return response
    print(f"No intent matched for input: '{user_input_normalized}'")  # Debug log
    return None

# ==================== PRODUCT FILTERING ====================
def recommend_products(price_max=None, color=None, category=None, pet_type=None, size=None, material=None):
    products = training_data.get("products", [])
    results = []
    for product in products:
        if (price_max is None or product["price"] <= price_max) and \
           (color is None or product["color"].lower() == color.lower() if color else True) and \
           (category is None or product["name"].lower().find(category.lower()) != -1 if category else True) and \
           (pet_type is None or product["pet_type"].lower() == pet_type.lower() if pet_type else True) and \
           (size is None or product["size"].lower() == size.lower() if size else True) and \
           (material is None or product["material"].lower() == material.lower() if material else True):
            results.append(product)
    return results

# ==================== INFO EXTRACTION ====================
def extract_query_info(user_input):
    price_max = color = category = pet_type = size = material = location = None
    user_input_lower = unicodedata.normalize("NFKC", user_input.lower().strip())

    if "d∆∞·ªõi" in user_input_lower:
        try:
            price_max = int(user_input_lower.split("d∆∞·ªõi")[-1].split("k")[0].strip()) * 1000
        except:
            pass

    if "m√†u" in user_input_lower:
        color_words = user_input_lower.split("m√†u")[-1].strip().split()
        if color_words:
            color = color_words[0]

    if "√°o" in user_input_lower:
        category = "√°o"
    elif "v√°y" in user_input_lower:
        category = "v√°y"
    elif "qu·∫ßn" in user_input_lower:
        category = "qu·∫ßn"
    elif "y·∫øm" in user_input_lower:
        category = "y·∫øm"

    if "ch√≥" in user_input_lower:
        pet_type = "ch√≥"
    elif "m√®o" in user_input_lower:
        pet_type = "m√®o"

    if "size s" in user_input_lower or " s " in user_input_lower:
        size = "S"
    elif "size m" in user_input_lower or " m " in user_input_lower:
        size = "M"
    elif "size l" in user_input_lower or " l " in user_input_lower:
        size = "L"

    if "cotton" in user_input_lower:
        material = "cotton"
    elif "voan" in user_input_lower:
        material = "voan"
    elif "jeans" in user_input_lower:
        material = "jeans"
    elif "len" in user_input_lower:
        material = "len"

    if "h√† n·ªôi" in user_input_lower:
        location = "H√† N·ªôi"
    elif "tp.hcm" in user_input_lower or "s√†i g√≤n" in user_input_lower:
        location = "TP.HCM"
    elif "ƒë√† n·∫µng" in user_input_lower:
        location = "ƒê√† N·∫µng"
    elif "c·∫ßn th∆°" in user_input_lower:
        location = "C·∫ßn Th∆°"

    return price_max, color, category, pet_type, size, material, location

# ==================== RESPONSE GENERATION ====================
def generate_response(user_input):
    user_input_normalized = unicodedata.normalize("NFKC", user_input.strip())
    user_input_lower = user_input_normalized.lower()

    # Handle vague or short inputs
    if len(user_input_normalized) <= 3 or user_input_lower in ["c√≥", "ok", "·ª´", "v√¢ng"]:
        return "D·∫°, b·∫°n mu·ªën t√¨m s·∫£n ph·∫©m n√†o cho b√© nh√† m√¨nh nh·ªâ? M√¨nh c√≥ √°o, v√°y, qu·∫ßn cho ch√≥ v√† m√®o, gi√° t·ª´ 150k-300k! üòä"

    # Prioritize intent matching
    intent_response = detect_intent(user_input_normalized)
    if intent_response:
        return intent_response

    # Handle specific keywords
    if user_input_lower in ["hi", "ch√†o", "hello", "xin ch√†o"]:
        return "Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√Ω t∆∞ v·∫•n qu·∫ßn √°o th√∫ c∆∞ng ƒë√¢y. B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m n√†o cho b√© nh√† m√¨nh nh·ªâ? üòä"

    if user_input_lower in ["c·∫£m ∆°n", "thank you", "c√°m ∆°n"]:
        return "Kh√¥ng c√≥ g√¨ ƒë√¢u b·∫°n! N·∫øu c·∫ßn th√™m g√¨, c·ª© n√≥i v·ªõi m√¨nh nh√©! üòÑ"

    price_max, color, category, pet_type, size, material, location = extract_query_info(user_input_normalized)

    if any(keyword in user_input_lower for keyword in ["gi·∫∑t", "b·∫£o qu·∫£n", "ph∆°i"]):
        prompt = f"H∆∞·ªõng d·∫´n ng·∫Øn g·ªçn c√°ch b·∫£o qu·∫£n {category or 'qu·∫ßn √°o th√∫ c∆∞ng'}, tr·∫£ l·ªùi t·ª± nhi√™n nh∆∞ nh√¢n vi√™n b√°n h√†ng."
        full_response = generator(prompt, max_new_tokens=150, truncation=True, num_return_sequences=1)[0]['generated_text']
        response = full_response.replace(prompt, "").strip()
        if response and response[-1] not in ".!?":
            response += "."
        return response or "N√™n gi·∫∑t tay v·ªõi n∆∞·ªõc m√°t, tr√°nh ch·∫•t t·∫©y m·∫°nh v√† ph∆°i n∆°i tho√°ng m√°t ƒë·ªÉ gi·ªØ form qu·∫ßn √°o nh√©! üòä"

    if any(keyword in user_input_lower for keyword in ["giao h√†ng", "bao l√¢u", "ph√≠ ship", "khi n√†o t·ªõi"]):
        prompt = f"Th√¥ng b√°o th·ªùi gian giao h√†ng v√† ph√≠ ship{(f' cho {location}' if location else '')}, tr·∫£ l·ªùi t·ª± nhi√™n nh∆∞ nh√¢n vi√™n b√°n h√†ng."
        full_response = generator(prompt, max_new_tokens=150, truncation=True, num_return_sequences=1)[0]['generated_text']
        response = full_response.replace(prompt, "").strip()
        if response and response[-1] not in ".!?":
            response += "."
        return response or f"B·∫°n ·ªü {location or 'khu v·ª±c c·ªßa b·∫°n'} th√¨ h√†ng s·∫Ω t·ªõi trong 1-2 ng√†y, ph√≠ ship 30k, mi·ªÖn ph√≠ cho ƒë∆°n t·ª´ 500k nha! üòä"

    products = recommend_products(price_max, color, category, pet_type, size, material)
    if products:
        product_list = ", ".join([f"{p['name']} (Gi√°: {p['price']} VNƒê, M√†u: {p['color']})" for p in products])
        return f"D·∫°, shop c√≥ {product_list}. B·∫°n mu·ªën m√¨nh t∆∞ v·∫•n th√™m v·ªÅ m·∫´u n√†o kh√¥ng? üòä"
    else:
        return "Xin l·ªói b·∫°n nha, hi·ªán t·∫°i shop ch∆∞a c√≥ s·∫£n ph·∫©m ph√π h·ª£p. B·∫°n th·ª≠ t√¨m m√†u ho·∫∑c size kh√°c xem, m√¨nh s·∫µn s√†ng t∆∞ v·∫•n th√™m! üòä"

# ==================== FLASK ROUTES ====================
@app.route("/")
def serve_index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message", "").strip()
    response = generate_response(user_input)
    print(f"User input: '{user_input}', Response: '{response}'")  # Debug log
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run(port=5000)